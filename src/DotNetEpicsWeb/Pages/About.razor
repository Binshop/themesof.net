@page "/about"

<h3>About the process</h3>
<p>
    We use GitHub issues, project boards, and milestones to track our work. We use
    four categories of issues:
</p>
<ul>
    <li>
        <p>
            <strong>Theme</strong>. A top-level/overarching objective that will span the project
            leases. A theme will often have an associated document describing those objectives.
        </p>
    </li>
    <li>
        <p>
            <strong>Epic</strong>. This is a higher level grouping of related user stories, it
            can span up to the entire release. For example "Enterprises have a first class experience
            acquiring and deploying .NET 6.0"
        </p>
    </li>
    <li>
        <p>
            <strong>User story</strong>. An explanation of the feature written from the perspective
            of the end user. Its purpose is to articulate how a software feature will provide value
            to the customer. Once implemented, it will contribute value towards the overall epic.
            For example: "As an IT Pro I have easy access to .NET Core installer release information
            and scripts in my air gapped environment so I can use this to determine which updates
            need to be deployed"
        </p>
    </li>
    <li>
        <p>
            <strong>Issue</strong>. These are all other work items. These could be bugs, features, or
            developer tasks. We leave it up to the engineering team/area owner how and if
            they want to use these.
        </p>
    </li>
</ul>
<p>
    All four of them are represented as GitHub issues. The first three are encoded
    by applying a label called <code>Theme</code>, <code>Epic</code>, or <code>User Story</code>.
    The last one is simply any issue that doesn&#39;t have of these special labels applied.
</p>
<p>
    The general structure is that a <code>Theme</code> will have one or more <code>Epic</code>
    issues, which in turn has one or more <code>User Story</code> issues under them. Since
    GitHub has no formal way of declaring children, the nesting is expressed by
    referencing the issue inside a task list. The task list item is meant to be
    marked when the referenced issue is completed.
</p>
